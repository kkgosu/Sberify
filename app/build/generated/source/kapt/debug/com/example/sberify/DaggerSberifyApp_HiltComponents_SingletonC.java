// Generated by Dagger (https://dagger.dev).
package com.example.sberify;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.example.sberify.di.NavigationModule_AlbumDetailsNavigationFactory;
import com.example.sberify.di.NavigationModule_FavoriteNavigationFactory;
import com.example.sberify.di.NavigationModule_NewReleasesNavigationFactory;
import com.example.sberify.di.NavigationModule_SearchNavigationFactory;
import com.kvlg.albumdetails.AlbumDetailsFragment;
import com.kvlg.albumdetails.AlbumDetailsFragment_MembersInjector;
import com.kvlg.core_db.DatabaseRepository;
import com.kvlg.core_db.database.AppDatabase;
import com.kvlg.core_db.di.DatabaseModule_ProvideDatabaseFactory;
import com.kvlg.core_db.di.DatabaseModule_ProvideDatabaseRepositoryFactory;
import com.kvlg.core_db.di.DatabaseModule_ProvideDbConverterFactory;
import com.kvlg.core_utils.di.CoreModule_ProvideTokenDataFactory;
import com.kvlg.core_utils.models.TokenData;
import com.kvlg.favorite.FavoriteFragment;
import com.kvlg.favorite.FavoriteFragment_MembersInjector;
import com.kvlg.favorite.FavoriteViewModel_AssistedFactory;
import com.kvlg.favorite.FavoriteViewModel_AssistedFactory_Factory;
import com.kvlg.genius_impl.GeniusApiImpl;
import com.kvlg.genius_impl.data.GeniusRepository;
import com.kvlg.genius_impl.data.network.GeniusApiMapper;
import com.kvlg.genius_impl.data.network.GeniusAuthInterceptor;
import com.kvlg.genius_impl.di.GeniusModule_ProvideGeniusApiServiceFactory;
import com.kvlg.genius_impl.di.GeniusModule_ProvideGeniusInterceptorFactory;
import com.kvlg.genius_impl.di.GeniusModule_ProvideGeniusOkHttpClientFactory;
import com.kvlg.genius_impl.di.GeniusModule_ProvideGeniusRepositoryFactory;
import com.kvlg.lyrics.LyricsFragment;
import com.kvlg.lyrics.LyricsViewModel_AssistedFactory;
import com.kvlg.lyrics.LyricsViewModel_AssistedFactory_Factory;
import com.kvlg.newreleases.NewReleasesFragment;
import com.kvlg.newreleases.NewReleasesFragment_MembersInjector;
import com.kvlg.search.SearchFragment;
import com.kvlg.search.SearchFragment_MembersInjector;
import com.kvlg.shared.SharedViewModel_AssistedFactory;
import com.kvlg.shared.SharedViewModel_AssistedFactory_Factory;
import com.kvlg.spotify_api.converter.ViewModelConverter;
import com.kvlg.spotify_api.di.ViewModelModule_ProvideViewModelConverterFactory;
import com.kvlg.spotify_impl.SpotifyApiImpl;
import com.kvlg.spotify_impl.data.SpotifyRepository;
import com.kvlg.spotify_impl.data.network.SpotifyApiMapper;
import com.kvlg.spotify_impl.data.network.SpotifyAuthInterceptor;
import com.kvlg.spotify_impl.di.SpotifyModule_ProvideSpotifyApiServiceFactory;
import com.kvlg.spotify_impl.di.SpotifyModule_ProvideSpotifyInterceptorFactory;
import com.kvlg.spotify_impl.di.SpotifyModule_ProvideSpotifyOkHttpClientFactory;
import com.kvlg.spotify_impl.di.SpotifyModule_ProvideSpotifyRepositoryFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSberifyApp_HiltComponents_SingletonC extends SberifyApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private DaggerSberifyApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public void injectSberifyApp(SberifyApp sberifyApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public SberifyApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerSberifyApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements SberifyApp_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public SberifyApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends SberifyApp_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private volatile Provider<DatabaseRepository> provideDatabaseRepositoryProvider;

    private volatile Provider<ViewModelConverter> provideViewModelConverterProvider;

    private volatile Provider<TokenData> provideTokenDataProvider;

    private volatile Provider<GeniusApiImpl> geniusApiImplProvider;

    private volatile Provider<SpotifyApiImpl> spotifyApiImplProvider;

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    private AppDatabase appDatabase() {
      return DatabaseModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerSberifyApp_HiltComponents_SingletonC.this.applicationContextModule));
    }

    private DatabaseRepository databaseRepository() {
      return DatabaseModule_ProvideDatabaseRepositoryFactory.provideDatabaseRepository(appDatabase(), DatabaseModule_ProvideDbConverterFactory.provideDbConverter());
    }

    private Provider<DatabaseRepository> databaseRepositoryProvider() {
      Object local = provideDatabaseRepositoryProvider;
      if (local == null) {
        local = new SwitchingProvider<>(0);
        provideDatabaseRepositoryProvider = (Provider<DatabaseRepository>) local;
      }
      return (Provider<DatabaseRepository>) local;
    }

    private Provider<ViewModelConverter> viewModelConverterProvider() {
      Object local = provideViewModelConverterProvider;
      if (local == null) {
        local = new SwitchingProvider<>(1);
        provideViewModelConverterProvider = (Provider<ViewModelConverter>) local;
      }
      return (Provider<ViewModelConverter>) local;
    }

    private TokenData tokenData() {
      return CoreModule_ProvideTokenDataFactory.provideTokenData(ApplicationContextModule_ProvideContextFactory.provideContext(DaggerSberifyApp_HiltComponents_SingletonC.this.applicationContextModule));
    }

    private Provider<TokenData> tokenDataProvider() {
      Object local = provideTokenDataProvider;
      if (local == null) {
        local = new SwitchingProvider<>(2);
        provideTokenDataProvider = (Provider<TokenData>) local;
      }
      return (Provider<TokenData>) local;
    }

    private GeniusAuthInterceptor geniusAuthInterceptor() {
      return GeniusModule_ProvideGeniusInterceptorFactory.provideGeniusInterceptor(tokenData());
    }

    private OkHttpClient namedOkHttpClient() {
      return GeniusModule_ProvideGeniusOkHttpClientFactory.provideGeniusOkHttpClient(geniusAuthInterceptor());
    }

    private GeniusApiMapper geniusApiMapper() {
      return GeniusModule_ProvideGeniusApiServiceFactory.provideGeniusApiService(namedOkHttpClient());
    }

    private GeniusRepository geniusRepository() {
      return GeniusModule_ProvideGeniusRepositoryFactory.provideGeniusRepository(appDatabase(), geniusApiMapper(), DatabaseModule_ProvideDbConverterFactory.provideDbConverter());
    }

    private GeniusApiImpl geniusApiImpl() {
      return new GeniusApiImpl(geniusRepository(), ViewModelModule_ProvideViewModelConverterFactory.provideViewModelConverter());
    }

    private Provider<GeniusApiImpl> geniusApiImplProvider() {
      Object local = geniusApiImplProvider;
      if (local == null) {
        local = new SwitchingProvider<>(3);
        geniusApiImplProvider = (Provider<GeniusApiImpl>) local;
      }
      return (Provider<GeniusApiImpl>) local;
    }

    private SpotifyAuthInterceptor spotifyAuthInterceptor() {
      return SpotifyModule_ProvideSpotifyInterceptorFactory.provideSpotifyInterceptor(tokenData());
    }

    private OkHttpClient namedOkHttpClient2() {
      return SpotifyModule_ProvideSpotifyOkHttpClientFactory.provideSpotifyOkHttpClient(spotifyAuthInterceptor());
    }

    private SpotifyApiMapper spotifyApiMapper() {
      return SpotifyModule_ProvideSpotifyApiServiceFactory.provideSpotifyApiService(namedOkHttpClient2());
    }

    private SpotifyRepository spotifyRepository() {
      return SpotifyModule_ProvideSpotifyRepositoryFactory.provideSpotifyRepository(appDatabase(), spotifyApiMapper(), DatabaseModule_ProvideDbConverterFactory.provideDbConverter());
    }

    private SpotifyApiImpl spotifyApiImpl() {
      return new SpotifyApiImpl(spotifyRepository(), ViewModelModule_ProvideViewModelConverterFactory.provideViewModelConverter());
    }

    private Provider<SpotifyApiImpl> spotifyApiImplProvider() {
      Object local = spotifyApiImplProvider;
      if (local == null) {
        local = new SwitchingProvider<>(4);
        spotifyApiImplProvider = (Provider<SpotifyApiImpl>) local;
      }
      return (Provider<SpotifyApiImpl>) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements SberifyApp_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public SberifyApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends SberifyApp_HiltComponents.ActivityC {
      private final Activity activity;

      private volatile Provider<FavoriteViewModel_AssistedFactory> favoriteViewModel_AssistedFactoryProvider;

      private volatile Provider<LoginViewModel_AssistedFactory> loginViewModel_AssistedFactoryProvider;

      private volatile Provider<LyricsViewModel_AssistedFactory> lyricsViewModel_AssistedFactoryProvider;

      private volatile Provider<SharedViewModel_AssistedFactory> sharedViewModel_AssistedFactoryProvider;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private FavoriteViewModel_AssistedFactory favoriteViewModel_AssistedFactory() {
        return FavoriteViewModel_AssistedFactory_Factory.newInstance(ActivityRetainedCImpl.this.databaseRepositoryProvider(), ActivityRetainedCImpl.this.viewModelConverterProvider());
      }

      private Provider<FavoriteViewModel_AssistedFactory> favoriteViewModel_AssistedFactoryProvider(
          ) {
        Object local = favoriteViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          favoriteViewModel_AssistedFactoryProvider = (Provider<FavoriteViewModel_AssistedFactory>) local;
        }
        return (Provider<FavoriteViewModel_AssistedFactory>) local;
      }

      private LoginViewModel_AssistedFactory loginViewModel_AssistedFactory() {
        return new LoginViewModel_AssistedFactory(ActivityRetainedCImpl.this.tokenDataProvider());
      }

      private Provider<LoginViewModel_AssistedFactory> loginViewModel_AssistedFactoryProvider() {
        Object local = loginViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          loginViewModel_AssistedFactoryProvider = (Provider<LoginViewModel_AssistedFactory>) local;
        }
        return (Provider<LoginViewModel_AssistedFactory>) local;
      }

      private LyricsViewModel_AssistedFactory lyricsViewModel_AssistedFactory() {
        return LyricsViewModel_AssistedFactory_Factory.newInstance((Provider) ActivityRetainedCImpl.this.geniusApiImplProvider(), ActivityRetainedCImpl.this.databaseRepositoryProvider());
      }

      private Provider<LyricsViewModel_AssistedFactory> lyricsViewModel_AssistedFactoryProvider() {
        Object local = lyricsViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          lyricsViewModel_AssistedFactoryProvider = (Provider<LyricsViewModel_AssistedFactory>) local;
        }
        return (Provider<LyricsViewModel_AssistedFactory>) local;
      }

      private SharedViewModel_AssistedFactory sharedViewModel_AssistedFactory() {
        return SharedViewModel_AssistedFactory_Factory.newInstance((Provider) ActivityRetainedCImpl.this.spotifyApiImplProvider(), ActivityRetainedCImpl.this.databaseRepositoryProvider());
      }

      private Provider<SharedViewModel_AssistedFactory> sharedViewModel_AssistedFactoryProvider() {
        Object local = sharedViewModel_AssistedFactoryProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          sharedViewModel_AssistedFactoryProvider = (Provider<SharedViewModel_AssistedFactory>) local;
        }
        return (Provider<SharedViewModel_AssistedFactory>) local;
      }

      private Map<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>> mapOfStringAndProviderOfViewModelAssistedFactoryOf(
          ) {
        return MapBuilder.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>newMapBuilder(4).put("com.kvlg.favorite.FavoriteViewModel", (Provider) favoriteViewModel_AssistedFactoryProvider()).put("com.example.sberify.LoginViewModel", (Provider) loginViewModel_AssistedFactoryProvider()).put("com.kvlg.lyrics.LyricsViewModel", (Provider) lyricsViewModel_AssistedFactoryProvider()).put("com.kvlg.shared.SharedViewModel", (Provider) sharedViewModel_AssistedFactoryProvider()).build();
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerSberifyApp_HiltComponents_SingletonC.this.applicationContextModule), mapOfStringAndProviderOfViewModelAssistedFactoryOf());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerSberifyApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements SberifyApp_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public SberifyApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends SberifyApp_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerSberifyApp_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.mapOfStringAndProviderOfViewModelAssistedFactoryOf());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public void injectAlbumDetailsFragment(AlbumDetailsFragment arg0) {
          injectAlbumDetailsFragment2(arg0);
        }

        @Override
        public void injectFavoriteFragment(FavoriteFragment arg0) {
          injectFavoriteFragment2(arg0);
        }

        @Override
        public void injectLyricsFragment(LyricsFragment arg0) {
        }

        @Override
        public void injectNewReleasesFragment(NewReleasesFragment arg0) {
          injectNewReleasesFragment2(arg0);
        }

        @Override
        public void injectSearchFragment(SearchFragment arg0) {
          injectSearchFragment2(arg0);
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerSberifyApp_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private AlbumDetailsFragment injectAlbumDetailsFragment2(AlbumDetailsFragment instance) {
          AlbumDetailsFragment_MembersInjector.injectNavigation(instance, NavigationModule_AlbumDetailsNavigationFactory.albumDetailsNavigation());
          return instance;
        }

        private FavoriteFragment injectFavoriteFragment2(FavoriteFragment instance) {
          FavoriteFragment_MembersInjector.injectNavigation(instance, NavigationModule_FavoriteNavigationFactory.favoriteNavigation());
          return instance;
        }

        private NewReleasesFragment injectNewReleasesFragment2(NewReleasesFragment instance) {
          NewReleasesFragment_MembersInjector.injectNavigation(instance, NavigationModule_NewReleasesNavigationFactory.newReleasesNavigation());
          return instance;
        }

        private SearchFragment injectSearchFragment2(SearchFragment instance) {
          SearchFragment_MembersInjector.injectNavigation(instance, NavigationModule_SearchNavigationFactory.searchNavigation());
          return instance;
        }

        private final class ViewWithFragmentCBuilder implements SberifyApp_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public SberifyApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends SberifyApp_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements SberifyApp_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public SberifyApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends SberifyApp_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.kvlg.favorite.FavoriteViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.favoriteViewModel_AssistedFactory();

            case 1: // com.example.sberify.LoginViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.loginViewModel_AssistedFactory();

            case 2: // com.kvlg.lyrics.LyricsViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.lyricsViewModel_AssistedFactory();

            case 3: // com.kvlg.shared.SharedViewModel_AssistedFactory 
            return (T) ActivityCImpl.this.sharedViewModel_AssistedFactory();

            default: throw new AssertionError(id);
          }
        }
      }
    }

    private final class ViewModelCBuilder implements SberifyApp_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public SberifyApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends SberifyApp_HiltComponents.ViewModelC {
      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }

    private final class SwitchingProvider<T> implements Provider<T> {
      private final int id;

      SwitchingProvider(int id) {
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.kvlg.core_db.DatabaseRepository 
          return (T) ActivityRetainedCImpl.this.databaseRepository();

          case 1: // com.kvlg.spotify_api.converter.ViewModelConverter 
          return (T) ViewModelModule_ProvideViewModelConverterFactory.provideViewModelConverter();

          case 2: // com.kvlg.core_utils.models.TokenData 
          return (T) ActivityRetainedCImpl.this.tokenData();

          case 3: // com.kvlg.genius_impl.GeniusApiImpl 
          return (T) ActivityRetainedCImpl.this.geniusApiImpl();

          case 4: // com.kvlg.spotify_impl.SpotifyApiImpl 
          return (T) ActivityRetainedCImpl.this.spotifyApiImpl();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private final class ServiceCBuilder implements SberifyApp_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public SberifyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends SberifyApp_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
