// Generated by view binder compiler. Do not edit!
package com.kvlg.albumdetails.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Space;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.kvlg.albumdetails.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAlbumDetailsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppCompatImageView albumCover;

  @NonNull
  public final TextView albumName;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final TextView artistName;

  @NonNull
  public final CoordinatorLayout detailContainer;

  @NonNull
  public final MaterialToolbar detailToolbar;

  @NonNull
  public final FloatingActionButton fabFavorite;

  @NonNull
  public final NestedScrollView recyclerContainer;

  @NonNull
  public final RecyclerView recyclerTracks;

  @NonNull
  public final TextView releaseDate;

  @NonNull
  public final Space space;

  private FragmentAlbumDetailsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppCompatImageView albumCover, @NonNull TextView albumName,
      @NonNull AppBarLayout appBarLayout, @NonNull TextView artistName,
      @NonNull CoordinatorLayout detailContainer, @NonNull MaterialToolbar detailToolbar,
      @NonNull FloatingActionButton fabFavorite, @NonNull NestedScrollView recyclerContainer,
      @NonNull RecyclerView recyclerTracks, @NonNull TextView releaseDate, @NonNull Space space) {
    this.rootView = rootView;
    this.albumCover = albumCover;
    this.albumName = albumName;
    this.appBarLayout = appBarLayout;
    this.artistName = artistName;
    this.detailContainer = detailContainer;
    this.detailToolbar = detailToolbar;
    this.fabFavorite = fabFavorite;
    this.recyclerContainer = recyclerContainer;
    this.recyclerTracks = recyclerTracks;
    this.releaseDate = releaseDate;
    this.space = space;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAlbumDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAlbumDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_album_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAlbumDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.album_cover;
      AppCompatImageView albumCover = rootView.findViewById(id);
      if (albumCover == null) {
        break missingId;
      }

      id = R.id.album_name;
      TextView albumName = rootView.findViewById(id);
      if (albumName == null) {
        break missingId;
      }

      id = R.id.app_bar_layout;
      AppBarLayout appBarLayout = rootView.findViewById(id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.artist_name;
      TextView artistName = rootView.findViewById(id);
      if (artistName == null) {
        break missingId;
      }

      CoordinatorLayout detailContainer = (CoordinatorLayout) rootView;

      id = R.id.detail_toolbar;
      MaterialToolbar detailToolbar = rootView.findViewById(id);
      if (detailToolbar == null) {
        break missingId;
      }

      id = R.id.fab_favorite;
      FloatingActionButton fabFavorite = rootView.findViewById(id);
      if (fabFavorite == null) {
        break missingId;
      }

      id = R.id.recycler_container;
      NestedScrollView recyclerContainer = rootView.findViewById(id);
      if (recyclerContainer == null) {
        break missingId;
      }

      id = R.id.recycler_tracks;
      RecyclerView recyclerTracks = rootView.findViewById(id);
      if (recyclerTracks == null) {
        break missingId;
      }

      id = R.id.release_date;
      TextView releaseDate = rootView.findViewById(id);
      if (releaseDate == null) {
        break missingId;
      }

      id = R.id.space;
      Space space = rootView.findViewById(id);
      if (space == null) {
        break missingId;
      }

      return new FragmentAlbumDetailsBinding((CoordinatorLayout) rootView, albumCover, albumName,
          appBarLayout, artistName, detailContainer, detailToolbar, fabFavorite, recyclerContainer,
          recyclerTracks, releaseDate, space);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
